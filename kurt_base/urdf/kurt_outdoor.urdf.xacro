<?xml version="1.0"?>
<robot xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
  xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface"
  xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
  xmlns:xacro="http://ros.org/wiki/xacro"
  name="kurt_outdoor_base">

  <xacro:include filename="$(find uos_common_urdf)/common.xacro" />
  <xacro:include filename="$(find kurt_base)/urdf/infrared_sonar.urdf.xacro" />
  <xacro:include filename="$(find uos_common_urdf)/urdf/imu.gazebo.urdf.xacro" />

  <xacro:property name="wheel_width" value="0.046" />
  <xacro:property name="wheel_radius" value="0.08244" /> <!-- corresponds to wheel_perimeter=0.518 -->
  <xacro:property name="axis_length" value="0.28" />
  <xacro:property name="middle_axis_length" value="0.39" />
  <xacro:property name="wheel_x_offset" value="0.14" />
  <xacro:property name="wheel_z_offset" value="-0.107" />
  <xacro:property name="turning_adaptation" value="0.64" />
  <xacro:property name="mass" value="15.6" />
  <xacro:property name="imu_stdev" value="0.00017" />

  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="package://kurt_base/meshes/kurt_base_outdoor.stl" />
      </geometry>

      <material name="red" >
        <color rgba="1 0 0 1" />
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="package://kurt_base/meshes/kurt_base_outdoor.stl" />
      </geometry>
    </collision>
    <!-- <visual>
      <geometry>
        <box size=".43 .325 .215" />
      </geometry>
      <material name="red" >
        <color rgba="1 0 0 1" />
      </material>
    </visual> -->
    <inertial>
      <mass value="${mass}" />
      <origin xyz="0.0 0.0 -0.040426445" />
      <inertia ixx="${mass * 0.007597848}" ixy="0.0" ixz="0.0"
        iyy="${mass * 0.012357128}" iyz="0.0"
        izz="${mass * 0.015397958}" />
    </inertial>
  </link>

  <gazebo reference="base_link">
    <material value="Gazebo/Red" />
  </gazebo>

  <gazebo>
    <plugin name="kurt_controller" filename="libgazebo_ros_diffdrive_uos.so">
      <alwaysOn>true</alwaysOn>
      <cmd_vel_topic_name>cmd_vel</cmd_vel_topic_name>
      <odom_topic_name>odom</odom_topic_name>
      <joint_states_topic_name>joint_states</joint_states_topic_name>
      <left_front_wheel_joint>left_front_wheel_joint</left_front_wheel_joint>
      <left_middle_wheel_joint>left_middle_wheel_joint</left_middle_wheel_joint>
      <left_rear_wheel_joint>left_rear_wheel_joint</left_rear_wheel_joint>
      <right_front_wheel_joint>right_front_wheel_joint</right_front_wheel_joint>
      <right_middle_wheel_joint>right_middle_wheel_joint</right_middle_wheel_joint>
      <right_rear_wheel_joint>right_rear_wheel_joint</right_rear_wheel_joint>
      <wheel_separation>${middle_axis_length}</wheel_separation>
      <wheel_diameter>${2*wheel_radius}</wheel_diameter>
      <turning_adaptation>${turning_adaptation}</turning_adaptation>
      <torque>4.0</torque>
      <max_velocity>1.3</max_velocity>
      <updateRate>40.0</updateRate>
    </plugin>
  </gazebo>

  <!-- publish ground truth for pose of base_footprint -->
  <gazebo>
    <plugin name="base_footprint_controller" filename="libgazebo_ros_p3d.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>30.0</updateRate>
      <bodyName>base_footprint</bodyName>
      <topicName>base_footprint_pose_ground_truth</topicName>
      <gaussianNoise>0.0</gaussianNoise>
      <frameName>map</frameName>
      <interface:position name="base_footprint_p3d_position_iface" />
    </plugin>
  </gazebo>

  <!-- inertial measurement unit for gazebo -->
  <xacro:imu_gazebo link="base_link" imu_topic="imu" update_rate="100.0" stdev="${imu_stdev}" />

  <xacro:macro name="kurt_wheel" params="name xyz">
    <link name="${name}_wheel_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://kurt_base/meshes/kurt_wheel_outdoor.stl" />
        </geometry>

        <material name="blackish"><color rgba="0.1 0.1 0.1 1"/></material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://kurt_base/meshes/kurt_wheel_outdoor.stl" />
          <!-- <cylinder length="${wheel_width}" radius="${wheel_radius}" /> -->
        </geometry>
      </collision>
      <inertial>
        <mass value="0.15" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.000177810" ixy="0.0" ixz="0.0"
          iyy="0.000332643" iyz="0.0"
          izz="0.000177810" />
      </inertial>
    </link>
    <joint name="${name}_wheel_joint" type="continuous">
      <origin xyz="${xyz}" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${name}_wheel_link"/>
      <axis xyz="0 1 0"/>
    </joint>
    <gazebo reference="kurt_wheel_${name}">
      <material value="Gazebo/Grey" />
    </gazebo>
  </xacro:macro>

  <xacro:kurt_wheel name="left_front" xyz="${wheel_x_offset} ${axis_length/2} ${wheel_z_offset}" />
  <xacro:kurt_wheel name="left_middle" xyz="0 ${middle_axis_length/2} ${wheel_z_offset}" />
  <xacro:kurt_wheel name="left_rear" xyz="${-wheel_x_offset} ${axis_length/2} ${wheel_z_offset}" />
  <xacro:kurt_wheel name="right_front" xyz="${wheel_x_offset} ${-axis_length/2} ${wheel_z_offset}" />
  <xacro:kurt_wheel name="right_middle" xyz="0 ${-middle_axis_length/2} ${wheel_z_offset}" />
  <xacro:kurt_wheel name="right_rear" xyz="${-wheel_x_offset} ${-axis_length/2} ${wheel_z_offset}" />

  <!-- base_footprint is a fictitious link(frame) that is on the ground right below base_link origin,
       navigation stack dedpends on this frame -->
  <link name="base_footprint">
    <!-- this needs to have a fake inertial element, otherwise all children will be ignored by Gazebo -->
    <inertial>
      <mass value="0.0001" />
      <origin xyz="0 0 0" />
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
        iyy="0.0001" iyz="0.0"
        izz="0.0001" />
    </inertial>
  </link>

  <joint name="base_footprint_joint" type="fixed">
    <origin xyz="0 0 ${-wheel_z_offset + wheel_radius}" rpy="0 0 0" />
    <parent link="base_footprint"/>
    <child link="base_link" />
  </joint>
</robot>
